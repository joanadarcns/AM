{"title":"Prova 2 - Aprendizagem de Máquina","markdown":{"yaml":{"title":"Prova 2 - Aprendizagem de Máquina","author":"Joana D'arc Nunes da Silva, Matrícula: 20180078535","date":"last-modified","date-format":"DD MMM, YYYY","format":{"html":{"theme":"lux","code-fold":"show","code-tools":false,"code-block-bg":true,"code-block-border-left":"#9400D3","highlight-style":"github","code-link":true,"toc":true,"toc-title":"Sumário","toc-location":"left","toc-depth":2,"number-sections":false,"number-depth":3,"smooth-scroll":true,"link-external-newwindow":true}},"fig-dpi":1000,"self-contained":true,"page-layout":"full","editor":"source"},"headingText":"Questão 1:","containsRefs":false,"markdown":"\n\n\nCrie um problema de regressão simulado em que a variável *target* (variável resposta) depende de 5 variáveis preditoras, porém, a base de dados, com 5 mil observações possui outras 15 *features* que não são relevantes para a predição. A variável *target* deve ser gerada a partir de uma função linear das variáveis preditoras, em que você poderá definir os pesos dessas 5 primeiras e as outras 15 restantes deverão ter peso zero. Ajuste a regressão Lasso e Ridge usando *10-fold cross-validation* e avalie o risco preditivo dos modelos. Quais os valores estimados dos coeficientes e qual modelo você escolheria para fazer previsões? Qual dos modelos gerou um vetor esparso dos coeficientes estimados? \\\n\n`Resposta:` \n\n```{r}\nrm(list = ls())\n\n# Carregando pacotes \nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(workflowsets)\nlibrary(yardstick)\nlibrary(glmnet)\n\n# Dando preferencias as funcoes do tidymodels \ntidymodels::tidymodels_prefer()\n\n# Setando a semente \nset.seed(0)\n\n# Função para gerar os dados \ngerando_dados <- function(n = 5000L){\n  regressao <- function(i){\n    x <- rnorm(n = 5000L, 0, 1)\n    target <- 7*x[1L] - 5*x[2L] + 2*x[3L] + 4*x[4L] + 9*x[5L] + rnorm(1L, 0, 0.5)\n    tibble(\n      y = target,\n      x1 = x[1L],\n      x2 = x[2L],\n      x3 = x[3L],\n      x4 = x[4L],\n      x5 = x[5L]\n    )\n  }\n  dados <- purrr::map(.x = 1L:n, .f = regressao) %>% \n    purrr::list_rbind()\n  \n  parte_esparsa <- matrix(0, n, 15)\n  \n  dados <- cbind(dados, parte_esparsa)\n  colnames(dados) <- c(\"y\", paste0(\"x\", 1L:20L))\n  tibble::as_tibble(dados)\n}\n\ndados <- gerando_dados()\n\n# Realizando o hold-out \ndados_split <- rsample::initial_split(dados, prop = 0.8, strata = \"y\")\ntreino <- rsample::training(dados_split)\nteste <- rsample::testing(dados_split)\n\n# Setando o modelo (set engine) \nmodelo_ridge <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = 0) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\nmodelo_lasso <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = 1) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\n# Criando workflows \nall_wf <- \n  workflowsets::workflow_set(\n    preproc = list(y ~ .),\n    models = list(ridge = modelo_ridge, lasso = modelo_lasso), \n    cross = TRUE\n  )\n\n# Validação cruzada \nset.seed(0)\ncv <- rsample::vfold_cv(treino, v = 10L)\n\n# Setando a métrica \nmetrica <- yardstick::metric_set(rmse)\n\n# Tunagem dos hiperparâmetros \ntunagem <- \n  all_wf %>% \n  workflowsets::workflow_map(\n    seed = 0, \n    verbose = TRUE,\n    resamples = cv,\n    grid = 50,\n    metrics = metrica\n  )\n```\n\n\n```{r}\n# Rank dos melhores modelos \nmodelos_rank <- tunagem %>% workflowsets::rank_results() %>% print()\n```\n\n\n```{r}\n# Selecionando os melhores modelos \nmelhor_ridge <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_ridge\") %>% \n  tune::select_best(metric = \"rmse\") \n\nmelhor_lasso <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_lasso\") %>% \n  tune::select_best(metric =\"rmse\")\n\n# Finalizando os modelos \nfinalizando_ridge <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_ridge\") %>% \n  tune::finalize_workflow(melhor_ridge) %>% \n  tune::last_fit(split = dados_split)\n\nfinalizando_lasso <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_lasso\") %>% \n  tune::finalize_workflow(melhor_lasso) %>% \n  tune::last_fit(split = dados_split)\n\n# Visualizando as métricas do modelo Ridge\nfinalizando_ridge %>% workflowsets::collect_metrics()\n```\n\n\n```{r}\n# Visualizando as métricas do modelo Lasso\nfinalizando_lasso %>% workflowsets::collect_metrics()\n```\n\n\nAvaliando o risco preditivo dos modelos, nota-se que o modelo Lasso apresentou um Erro Quadrático Médio (EQM) de $0.503$, enquanto o modelo Ridge apresentou um EQM de $0.965$. Além disso, observa-se que ambos os modelos apresentaram um $R^{2}$ de $0.999$. Como o risco preditivo do modelo Lasso foi menor que o do modelo Ridge, então eu escolheria o modelo Lasso para fazer as previsões.\\\n\n\n```{r}\n# Visualizando predições do modelo Ridge\nfinalizando_ridge %>% workflowsets::collect_predictions()\n```\n\n\n```{r}\n# Visualizando predições do modelo Lasso\nfinalizando_lasso %>% workflowsets::collect_predictions()\n```\n\n\n```{r}\n# Extraindo o modelo Ridge\nmodelo_final_ridge <- \n  finalizando_ridge %>% \n  extract_fit_parsnip() \n\n# Extraindo o modelo Lasso\nmodelo_final_lasso <- \n  finalizando_lasso %>% \n  extract_fit_parsnip()\n```\n\n\n```{r}\n# Visualizando os coeficientes estimados do modelo Ridge\ncoeficientes_ridge <- modelo_final_ridge %>% \n  tidy() %>% \n  filter(term != \"(Intercept)\") %>% print()\n```\n\n\n```{r}\n# Visualizando os coeficientes estimados do modelo Lasso\ncoeficientes_lasso <- modelo_final_lasso %>% \n  tidy() %>% \n  filter(term != \"(Intercept)\") %>% print()\n```\n\n\nO modelo Lasso gerou um vetor esparso de coeficientes estimados, pois assim como na penalização AIC é realizada a seleção de variáveis, consequentemente, alguns coeficientes são zerados, o mesmo não acontece com o modelo Ridge.\\\n\n\n```{r}\n# Fazendo previsões \ndados_novos <- dados[sample(1:nrow(dados), 10), -1]\n\n# Fazendo previsões com o modelo Ridge\npredict(finalizando_ridge$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n\n```{r}\n# Fazendo previsões com o modelo Lasso\npredict(finalizando_lasso$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo Ridge ao conjunto de dados original\naugment(finalizando_ridge$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo Lasso ao conjunto de dados original\naugment(finalizando_lasso$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n# Questão 2:\n\nConsidere o melhor modelo da questão anterior, e compare-o com a regressão *Elastic Net*. Faça uma comparação justa dos modelos, utilizando `workflow_set` e `workflow_map`. Avalie o risco preditivo dos modelos e compare os coeficientes estimados. Qual dos modelos você escolheria para fazer previsões? Explique! \\\n\n`Resposta:`\n\nComo o melhor modelo na questão anterior foi o modelo Lasso, então irei compará-lo com o modelo Elastic Net.\\\n\n```{r}\nrm(list = ls())\n\n# Carregando pacotes \nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(workflowsets)\nlibrary(yardstick)\nlibrary(glmnet)\n\n# Dando preferencias as funcoes do tidymodels \ntidymodels::tidymodels_prefer()\n\n# Setando a semente \nset.seed(0)\n\n# Função para gerar os dados \ngerando_dados <- function(n = 5000L){\n  regressao <- function(i){\n    x <- rnorm(n = 5000L, 0, 1)\n    target <- 7*x[1L] - 5*x[2L] + 2*x[3L] + 4*x[4L] + 9*x[5L] + rnorm(1L, 0, 0.5)\n    tibble(\n      y = target,\n      x1 = x[1L],\n      x2 = x[2L],\n      x3 = x[3L],\n      x4 = x[4L],\n      x5 = x[5L]\n    )\n  }\n  dados <- purrr::map(.x = 1L:n, .f = regressao) %>% \n    purrr::list_rbind()\n  \n  parte_esparsa <- matrix(0, n, 15)\n  \n  dados <- cbind(dados, parte_esparsa)\n  colnames(dados) <- c(\"y\", paste0(\"x\", 1L:20L))\n  tibble::as_tibble(dados)\n}\n\ndados <- gerando_dados()\n\n# Realizando o hold-out \ndados_split <- rsample::initial_split(dados, prop = 0.8, strata = \"y\")\ntreino <- rsample::training(dados_split)\nteste <- rsample::testing(dados_split)\n\n# Setando o modelo (set engine) \nmodelo_lasso <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = 1) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\nmodelo_elastic <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = tune::tune()) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\n# Criando workflows \nall_wf <- \n  workflowsets::workflow_set(\n    preproc = list(y ~ .),\n    models = list(lasso = modelo_lasso, elastic = modelo_elastic), \n    cross = TRUE\n  )\n\n# Validação cruzada \nset.seed(0)\ncv <- rsample::vfold_cv(treino, v = 10L)\n\n# Setando a métrica \nmetrica <- yardstick::metric_set(rmse)\n\n# Tunagem dos hiperparâmetros \ntunagem <- \n  all_wf %>% \n  workflowsets::workflow_map(\n    seed = 0, \n    verbose = TRUE,\n    resamples = cv,\n    grid = 50,\n    metrics = metrica\n  )\n```\n\n\n```{r}\n# Rank dos melhores modelos \nmodelos_rank <- tunagem %>% workflowsets::rank_results() %>% print()\n```\n\n\n```{r}\n# Selecionando os melhores modelos \nmelhor_lasso <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_lasso\") %>% \n  tune::select_best(metric =\"rmse\")\n\nmelhor_elastic <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_elastic\") %>% \n  tune::select_best(metric = \"rmse\")\n\n# Finalizando os modelos \nfinalizando_lasso <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_lasso\") %>% \n  tune::finalize_workflow(melhor_lasso) %>% \n  tune::last_fit(split = dados_split)\n\nfinalizando_elastic <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_elastic\") %>% \n  tune::finalize_workflow(melhor_elastic) %>% \n  tune::last_fit(split = dados_split)\n\n## Visualizando as métricas do modelo Lasso\nfinalizando_lasso %>% workflowsets::collect_metrics()\n```\n\n\n```{r}\n# Visualizando as métricas do modelo Elastic Net\nfinalizando_elastic %>% workflowsets::collect_metrics()\n```\n\n\nAvaliando o risco preditivo dos modelos, nota-se que o modelo Lasso apresentou um Erro Quadrático Médio (EQM) de $0.503$, enquanto o modelo Elastic Net apresentou um EQM de $0.502$. Além disso, observa-se que ambos os modelos apresentaram um $R^{2}$ de $0.999$. Como o risco preditivo do modelo Elastic Net foi um pouco menor que o do modelo Lasso, então eu escolheria o modelo Elastic Net para fazer as previsões.\\\n\n\n```{r}\n# Visualizando predições do modelo Lasso\nfinalizando_lasso %>% workflowsets::collect_predictions()\n```\n\n```{r}\n# Visualizando predições do modelo Elastic Net\nfinalizando_elastic %>% workflowsets::collect_predictions()\n```\n\n```{r}\n# Extraindo o modelo Lasso\nmodelo_final_lasso <- \n  finalizando_lasso %>% \n  extract_fit_parsnip() \n\n# Extraindo o modelo Elastic Net\nmodelo_final_elastic <- \n  finalizando_elastic %>% \n  extract_fit_parsnip()\n```\n\n\n```{r}\n# Visualizando os coeficientes estimados do modelo Lasso\ncoeficientes_lasso <- modelo_final_lasso %>% \n  tidy() %>% \n  filter(term != \"(Intercept)\") %>% print()\n```\n\n\n```{r}\n# Visualizando os coeficientes estimados do modelo Elastic Net\ncoeficientes_elastic <- modelo_final_elastic %>% \n  tidy() %>% \n  filter(term != \"(Intercept)\") %>% print()\n```\n\n```{r}\n# Fazendo previsões \ndados_novos <- dados[sample(1:nrow(dados), 10), -1]\n\n# Fazendo previsões com o modelo Lasso\npredict(finalizando_lasso$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n\n```{r}\n# Fazendo previsões com o modelo Elastic Net\npredict(finalizando_elastic$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo Lasso ao conjunto de dados original\naugment(finalizando_lasso$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo Elastic Net ao conjunto de dados original\naugment(finalizando_elastic$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n# Questão 3:\n\nUtilize o método *K - Nearest Neighbors* para prever o preço médio ( variável `MEDV`) de uma casa em diferentes áreas da cidade de Boston com base em várias características socioeconômicas e geográficas. Faça uma descritiva dos dados e realize a fase de preprocessamento dos dados.\\\n\n**Você deverá:**\\\n\n1. Explorar as variáveis, identificando as variáveis que possuem um comportamento assimétrico;\\\n2. Pré-processar os dados e incluir o preprocessamento no pipeline. No preprocessamento, você\n deverá:\\\n -  Realizar a transformação de Yeo-Johnson nas variáveis que possuem um comportamento assimétrico. No pacote *recipes*, utilize `step_YeoJohnson`;\n - Incluir no preprocessamento a eliminação de variáveis altamente correlacionadas;\\\n - Incluir no preprocessamento a eliminação de covariáveis com zero variância.\\\n3. Estimar o risco preditivo do modelo. Houve boas previsões? Explique!\\\n4. Você deverá estratificar os dados em $80 \\%$ para treino e $20 \\%$ para teste, com base na variável *target*.\\\n5. Utilize na validação cruzada *10-fold cross-validation*.\\\n\nAcesse o [link](https://www.kaggle.com/datasets/fedesoriano/the-boston-houseprice-data) para baixar os dados.\\\n\n`Resposta:`\n\n```{r}\nrm(list = ls())\n\n# Carregando pacotes \nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(workflowsets)\nlibrary(yardstick)\nlibrary(glmnet)\nlibrary(kknn)\nlibrary(visdat)\nlibrary(janitor)\nlibrary(parsnip)\nlibrary(skimr)\n\n# Dando preferencias as funcoes do tidymodels \ntidymodels::tidymodels_prefer()\n\n# Setando a semente \nset.seed(0)\n\n# Carregando os dados \ndados <- read.csv(\"~/JOANA/ESTATÍSTICA/2024.1/Aprendizagem de Máquina/AM/Prova2/dados/boston.csv\")\n\n# Limpando os nomes das variáveis \ndados <-\n  dados %>% \n  janitor::clean_names()\n\n\n# Visualizando as primeiras observações dos dados\nhead(dados)\n```\n\n```{r}\n# Visualizando a estrutura dos dados\nglimpse(dados)\n```\n\n```{r}\n# Estatística descritiva dos dados\nskimr::skim(dados)\n```\n\nObserva-se que o conjunto de dados contém 506 observações e 14 variáveis. Além disso, observa-se que as variáveis `crim`, `zn`, `indus`, `nox`, `rm`, `age`, `dis`, `tax`, `ptratio`, `b`, `lstat` e `medv` são do tipo numérico, enquanto as variáveis `chas` e `rad` são do tipo inteiro categóricas.\\\n\n```{r}\n# Visualizando as variáveis que possuem um comportamento assimétrico\nDescTools::Desc(dados)\n```\n\nUtilizando a função `Desc()` da library `DescTools` para analisar visualmente as variáveis que possuem um comportamento assimétrico, e avaliando a assimetria das variáveis com base do valor do argumento `skew` de cada variável, nota-se que as variáveis `indus` e `rm` possuem um comportamento simétrico, pois o valor do `skew`destas variáveis estão próximos de zero, enquanto as variáveis `crim`, `zn`, `nox`, `age`, `dis`, `tax`, `ptratio`, `b`, `lstat` e `medv` possuem um comportamento assimétrico.\\\n\n```{r}\n# Olhando rapidamento os dados\nvisdat::vis_dat(dados)\n```\n\n```{r}\n# Visualizando a correlação entre as variáveis \nvisdat::vis_cor(dados)\n```\n\n\n```{r}\nset.seed(0)\n\n# Data Splitting\ndados_split <- rsample::initial_split(dados, prop = 0.8, strata = \"medv\")\ntreino <- rsample::training(dados_split)\nteste <- rsample::testing(dados_split)\n\n# Criando o conjunto de validação\ncv <- rsample::vfold_cv(treino, v = 10L)\n\n# Pré-processamento dos dados \nreceita <- \n  recipes::recipe(medv ~ ., data = treino) %>%\n  # Eliminando as variáveis constantes (com zero variância)\n  recipes::step_zv(all_predictors()) %>%\n  # Transformando as variáveis assimétricas\n  recipes::step_YeoJohnson(all_numeric_predictors()) %>%\n  # Transformando as variáveis categóricas em dicotômicas (0 e 1) \n  recipes::step_dummy(all_nominal_predictors()) %>%\n  # Eliminando as variáveis altamente correlacionadas\n  recipes::step_corr(all_numeric_predictors()) \n```\n\n\n```{r}\n# Ajustando o modelo KNN \nmodelo_knn <- \n  parsnip::nearest_neighbor(neighbors = tune(\"k\")) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"kknn\")\n```\n\n\n```{r}\n# Criando o Workflow \nwf <- \n  workflowsets::workflow_set(\n    preproc = list(formula = receita),\n    models = list(knn = modelo_knn), \n    cross = TRUE\n  )\n```\n\n```{r}\n# Setando a métrica\nmetrica <- yardstick::metric_set(rmse)\n\n# Tunagem dos hiperparâmetros\ntunagem <- \n  wf %>% \n  workflowsets::workflow_map(\n    seed = 0, \n    verbose = TRUE,\n    resamples = cv,\n    grid = 50,\n    metrics = metrica\n  )\n```\n\n```{r}\n# Selecionando o melhor modelo\nmelhor_knn <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_knn\") %>% \n  tune::select_best(metric = \"rmse\")\n\n# Finalizando o modelo\nfinalizando_knn <-\n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_knn\") %>% \n  tune::finalize_workflow(melhor_knn) %>% \n  tune::last_fit(split = dados_split)\n```\n\n```{r}\n# Visualizando as métricas do modelo KNN\nfinalizando_knn %>% workflowsets::collect_metrics()\n```\n\nEm relação ao risco preditivo do modelo KNN, observa-se que o Erro Quadrático Médio (EQM) foi de $4.74$ e o $R^{2}$ de $0.730$, o EQM foi relativamente bom, mas como o $R^{2}$ não é muito alto, é provável que o modelo não faça boas previsões para alguns preços médios das casas de diferentes áreas da cidade de Boston.\\\n\n\n```{r}\n# Visualizando predições do modelo KNN\nfinalizando_knn %>% workflowsets::collect_predictions()\n```\n\nAnalisando algumas predições acima do modelo KNN, observa-se que o modelo fez boas previsões para os preços médios (`medv`) em sua grande parte, porém para alguns preços médios o modelo não fez boas previsões.\\\n\n```{r}\n# Extraindo o modelo KNN\nmodelo_final_knn <- \n  finalizando_knn %>% \n  extract_fit_parsnip()\n```\n\n\n```{r}\n# Fazendo previsões \ndados_novos <- dados[sample(1:nrow(dados), 10), ]\n\n# Fazendo previsões com o modelo KNN\npredict(finalizando_knn$.workflow[[1]], \n                           new_data = dados_novos) \n```\n\n\n```{r}\n# Adicionando as previsões com o modelo KNN ao conjunto de dados original\nprevisoes_knn <- augment(finalizando_knn$.workflow[[1]], \n                         new_data = dados_novos) %>% print()\n```\n\n```{r}\n# Adicionando as previsões com o modelo KNN ao conjunto de dados original\nprevisoes_knn[, c(\"medv\", \".pred\")] %>% print()\n```\n\nObserva-se que o modelo fez boas previsões para os preços médios (`medv`) em sua grande parte, porém para alguns preços médios o modelo não fez boas previsões.\\\n\n\n# Questão 4:\n\nCom base na questão 1, escolha entre as 5 *features* preditoras que foram úteis para gerar $y$, duas para introduzir $10 \\%$ de *missing values* em cada uma dessas duas variáveis. A introdução das observações faltantes deverá ser aleatória. Após, isso, realize a comparação do método *Elastic-Net* com o método *K - Nearest Neighbors* - KNN. Compare o risco preditivo de cada um do modelos. Na fase de pré-processamento, você deverá utilizar também o método KNN, considerando $k =5$ dados faltantes. Qual o modelo que forneceu um melhor risco preditivo? Explique!\\\n \n`Resposta:`\n\n```{r}\nrm(list = ls())\n\n# Carregando pacotes \nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(workflowsets)\nlibrary(yardstick)\nlibrary(glmnet)\nlibrary(kknn)\nlibrary(visdat)\n\n# Dando preferencias as funcoes do tidymodels \ntidymodels::tidymodels_prefer()\n\n# Setando a semente \nset.seed(0)\n\n# Função para gerar os dados \ngerando_dados <- function(n = 5000L){\n  regressao <- function(i){\n    x <- rnorm(n = 5000L, 0, 1)\n    target <- 7*x[1L] - 5*x[2L] + 2*x[3L] + 4*x[4L] + 9*x[5L] + rnorm(1L, 0, 0.5)\n    tibble(\n      y = target,\n      x1 = x[1L],\n      x2 = x[2L],\n      x3 = x[3L],\n      x4 = x[4L],\n      x5 = x[5L]\n    )\n  }\n  dados <- purrr::map(.x = 1L:n, .f = regressao) %>% \n    purrr::list_rbind()\n  \n  parte_esparsa <- matrix(0, n, 15)\n  \n  dados <- cbind(dados, parte_esparsa)\n  colnames(dados) <- c(\"y\", paste0(\"x\", 1L:20L))\n  tibble::as_tibble(dados)\n}\n\ndados <- gerando_dados()\n```\n\n\n```{r}\nset.seed(0) \n\n# Introduzindo 10% missing values nas variáveis x3 e x5 de forma aleatória\nid_na <- sample(1:nrow(dados), 0.1*nrow(dados))\ndados[id_na, \"x3\"] <- NA\ndados[id_na, \"x5\"] <- NA\n```\n\n```{r}\n# Olhando rapidamento os dados \nvisdat::vis_dat(dados)\n```\n\n\n```{r}\n# Visualizando a correlação entre as variáveis\nvisdat::vis_cor(dados[-c(7:21)])\n```\n\n```{r}\nset.seed(0)\n\n# Data Splitting\ndados_split <- rsample::initial_split(dados, prop = 0.8, strata = \"y\")\ntreino <- rsample::training(dados_split)\nteste <- rsample::testing(dados_split)\n\n# Criando o conjunto de validação\ncv <- rsample::vfold_cv(treino, v = 10L)\n\n# Pré-processamento dos dados \nreceita <- \n  recipe(y ~ ., data = treino) %>%\n  # Eliminando as variáveis constantes (com zero variância)\n  recipes::step_zv(all_predictors()) %>%\n  # Normalizando as variáveis numéricas\n  recipes::step_normalize(all_numeric_predictors()) %>%\n  #considerando k = 5 para inputar os dados faltantes\n  recipes::step_impute_knn(all_predictors(), neighbors = 5)  \n```\n\n\n```{r}\n# Setando o modelo (set engine) \nmodelo_elastic <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = tune::tune()) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\nmodelo_knn <- \n  parsnip::nearest_neighbor(neighbors = tune(\"k\")) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"kknn\")\n```\n\n\n```{r}\n# Criando workflows \nall_wf <- \n  workflowsets::workflow_set(\n    preproc = list(formula = receita),\n    models = list(elastic = modelo_elastic, knn = modelo_knn), \n    cross = TRUE\n  )\n```\n\n\n```{r}\n# Setando a métrica \nmetrica <- yardstick::metric_set(rmse)\n\n# Tunagem dos hiperparâmetros \ntunagem <- \n  all_wf %>% \n  workflowsets::workflow_map(\n    seed = 0, \n    verbose = TRUE,\n    resamples = cv,\n    grid = 50,\n    metrics = metrica\n  )\n```\n\n\n\n```{r}\n# Rank dos melhores modelos \nmodelos_rank <- tunagem %>% workflowsets::rank_results() %>% print()\n```\n\n\n```{r}\n# Selecionando os melhores modelos \nmelhor_elastic <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_elastic\") %>% \n  tune::select_best(metric = \"rmse\")\n\nmelhor_knn <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_knn\") %>% \n  tune::select_best(metric = \"rmse\")\n\n# Finalizando os modelos \nfinalizando_elastic <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_elastic\") %>% \n  tune::finalize_workflow(melhor_elastic) %>% \n  tune::last_fit(split = dados_split)\n\nfinalizando_knn <-\n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_knn\") %>% \n  tune::finalize_workflow(melhor_knn) %>% \n  tune::last_fit(split = dados_split)\n```\n\n\n```{r}\n# Visualizando as métricas do modelo Elastic Net\nfinalizando_elastic %>% workflowsets::collect_metrics()\n```\n\n\n```{r}\n# Visualizando as métricas do modelo KNN\nfinalizando_knn %>% workflowsets::collect_metrics()\n```\n\nAvaliando o risco preditivo dos modelos, nota-se que o modelo Elastic Net apresentou um Erro Quadrático Médio (EQM) de $3.41$, enquanto o modelo KNN apresentou um EQM de $4.15$. Além disso, observa-se que o modelo Elastic Net apresentou um $R^{2}$ de $0.930$, enquanto para o modelo KNN o $R^{2}$ foi de $0.906$. Como o EQM do modelo Elastic Net foi menor que o do modelo KNN, além do $R^{2}$ do modelo Elastic Net ter sido maior que o do KNN, logo o modelo Elastic Net nos forneceu um melhor risco preditivo que o KNN.\\\n\n\n```{r}\n# Visualizando predições do modelo Elastic Net\nfinalizando_elastic %>% workflowsets::collect_predictions()\n```\n\n\n```{r}\n# Visualizando predições do modelo KNN\nfinalizando_knn %>% workflowsets::collect_predictions()\n```\n\n```{r}\n# Extraindo o modelo Elastic Net\nmodelo_final_elastic <- \n  finalizando_elastic %>% \n  extract_fit_parsnip()\n\n# Extraindo o modelo KNN\nmodelo_final_knn <- \n  finalizando_knn %>% \n  extract_fit_parsnip()\n```\n\n\n# Questão 5:\n\n Considere a base de dados referente à despesas médicas, cujo o objetivo é predizer a variável `charges`. Clique [aqui](https://www.kaggle.com/datasets/mirichoi0218/insurance) para efetuar o download dos dados. Considere os algoritmos, lasso, ridge, *elastic net* e KNN e compare o risco preditivo de cada um dos modelos.\\\n \nVocê deverá utilizar boas práticas na comparação, explorar os dados e avaliar de forma adequada o risco preditivo de cada um dos modelos considerados. Perceba que existem variáveis categóricas na base de dados. Dessa forma, você deverá introduzir no *pipeline* o pré-processamento. Discuta o resultado.\\\n \n`Resposta:`\n\n```{r}\nrm(list = ls())\n\n# Carregando pacotes \nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(workflowsets)\nlibrary(yardstick)\nlibrary(glmnet)\nlibrary(kknn)\nlibrary(visdat)\n\n# Dando preferencias as funcoes do tidymodels \ntidymodels::tidymodels_prefer()\n\n# Setando a semente \nset.seed(0)\n\n# Carregando os dados \ndados <- read.csv(\"~/JOANA/ESTATÍSTICA/2024.1/Aprendizagem de Máquina/AM/Prova2/dados/insurance.csv\")\n\n# Visualizando as primeiras observações dos dados\nhead(dados)\n```\n\n```{r}\n# Visualizando a estrutura dos dados\nglimpse(dados)\n```\n\n```{r}\n# Olhando rapidamento os dados \nvisdat::vis_dat(dados)\n```\n\n```{r}\n# Visualizando a correlação entre as variáveis \nvisdat::vis_cor(dados[-c(2,5,6)])\n```\n\n\n```{r}\nset.seed(0)\n\n# Data Splitting\ndados_split <- rsample::initial_split(dados, prop = 0.8, strata = \"charges\")\ntreino <- rsample::training(dados_split)\nteste <- rsample::testing(dados_split)\n\n# Criando o conjunto de validação\ncv <- rsample::vfold_cv(treino, v = 5L)\n\n# Pré-processamento dos dados \nreceita <- \n  recipe(charges ~ ., data = treino) %>%\n  # Eliminando as variáveis constantes (com zero variância)\n  recipes::step_zv(all_predictors()) %>%\n  # Normalizando as variáveis numéricas\n  recipes::step_normalize(all_numeric_predictors()) %>%\n  # Transformando as variáveis categóricas em dicotômicas (0 e 1) \n  step_dummy(all_nominal_predictors()) %>%\n  # Eliminando as variáveis correlacionadas\n  recipes::step_corr(all_numeric_predictors()) \n```\n\n\n```{r}\n# Setando o modelo (set engine) \nmodelo_ridge <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = 0) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\nmodelo_lasso <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = 1) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\nmodelo_elastic <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = tune::tune()) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\nmodelo_knn <- \n  parsnip::nearest_neighbor(neighbors = tune(\"k\")) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"kknn\")\n```\n\n\n```{r}\n# Criando workflows \nall_wf <- \n  workflowsets::workflow_set(\n    preproc = list(formula = receita),\n    models = list(ridge = modelo_ridge, lasso = modelo_lasso, \n                  elastic = modelo_elastic, knn = modelo_knn), \n    cross = TRUE\n  )\n```\n\n\n```{r}\n# Setando a métrica \nmetrica <- yardstick::metric_set(rmse)\n\n# Tunagem dos hiperparâmetros \ntunagem <- \n  all_wf %>% \n  workflowsets::workflow_map(\n    seed = 0, \n    verbose = TRUE,\n    resamples = cv,\n    grid = 50,\n    metrics = metrica\n  )\n```\n\n\n\n```{r}\n# Rank dos melhores modelos \nmodelos_rank <- tunagem %>% workflowsets::rank_results() %>% print()\n```\n\n\n```{r}\n# Selecionando os melhores modelos \nmelhor_ridge <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_ridge\") %>% \n  tune::select_best(metric = \"rmse\")\n\nmelhor_lasso <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_lasso\") %>% \n  tune::select_best(metric =\"rmse\")\n\nmelhor_elastic <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_elastic\") %>% \n  tune::select_best(metric = \"rmse\")\n\nmelhor_knn <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_knn\") %>% \n  tune::select_best(metric = \"rmse\")\n\n# Finalizando os modelos \nfinalizando_ridge <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_ridge\") %>% \n  tune::finalize_workflow(melhor_ridge) %>% \n  tune::last_fit(split = dados_split)\n\nfinalizando_lasso <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_lasso\") %>% \n  tune::finalize_workflow(melhor_lasso) %>% \n  tune::last_fit(split = dados_split)\n\nfinalizando_elastic <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_elastic\") %>% \n  tune::finalize_workflow(melhor_elastic) %>% \n  tune::last_fit(split = dados_split)\n\nfinalizando_knn <-\n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_knn\") %>% \n  tune::finalize_workflow(melhor_knn) %>% \n  tune::last_fit(split = dados_split)\n```\n\n```{r}\n# Visualizando as métricas do modelo Ridge\nfinalizando_ridge %>% workflowsets::collect_metrics()\n```\n\n```{r}\n# Visualizando as métricas do modelo Lasso\nfinalizando_lasso %>% workflowsets::collect_metrics()\n```\n\n```{r}\n# Visualizando as métricas do modelo Elastic Net\nfinalizando_elastic %>% workflowsets::collect_metrics()\n```\n\n\n```{r}\n# Visualizando as métricas do modelo KNN\nfinalizando_knn %>% workflowsets::collect_metrics()\n```\n\nComparando o risco preditivo dos modelos, observa-se que o modelo KNN foi o que apresentou o melhor risco preditivo com um menor Erro Quadrático Médio (EQM) de $5550$ e um maior $R^{2}$ de $0.811$. O modelo Lasso obteve um EQM de $6442$, enquanto o modelo Elastic Net apresentou um EQM de $6446$, em que ambos tiveram um $R^{2}$ de $0.743$. Por fim, o modelo que mostrou um pior desempenho foi o Ridge, com um maior EQM de $6530$ e $R^{2}$ de $0.744$.\\\n\n```{r}\n# Visualizando predições do modelo Ridge\nfinalizando_ridge %>% workflowsets::collect_predictions()\n```\n\n```{r}\n# Visualizando predições do modelo Lasso\nfinalizando_lasso %>% workflowsets::collect_predictions()\n```\n\n```{r}\n# Visualizando predições do modelo Elastic Net\nfinalizando_elastic %>% workflowsets::collect_predictions()\n```\n\n\n```{r}\n# Visualizando predições do modelo KNN\nfinalizando_knn %>% workflowsets::collect_predictions()\n```\n\n```{r}\n# Extraindo o modelo Ridge\nmodelo_final_ridge <- \n  finalizando_ridge %>% \n  extract_fit_parsnip()\n\n# Extraindo o modelo Lasso\nmodelo_final_lasso <- \n  finalizando_lasso %>% \n  extract_fit_parsnip()\n\n# Extraindo o modelo Elastic Net\nmodelo_final_elastic <- \n  finalizando_elastic %>% \n  extract_fit_parsnip()\n\n# Extraindo o modelo KNN\nmodelo_final_knn <- \n  finalizando_knn %>% \n  extract_fit_parsnip()\n```\n\n```{r}\n# Fazendo previsões \ndados_novos <- dados[sample(1:nrow(dados), 10), -7]\n\n# Fazendo previsões com o modelo Ridge\npredict(finalizando_ridge$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n\n```{r}\n# Fazendo previsões com o modelo Lasso\npredict(finalizando_lasso$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n\n```{r}\n# Fazendo previsões com o modelo Elastic Net\npredict(finalizando_elastic$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n```{r}\n# Fazendo previsões com o modelo KNN\npredict(finalizando_knn$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n```{r}\n# Adicionando as previsões com o modelo Ridge ao conjunto de dados original\naugment(finalizando_ridge$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo Lasso ao conjunto de dados original\naugment(finalizando_lasso$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo Elastic Net ao conjunto de dados original\naugment(finalizando_elastic$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo KNN ao conjunto de dados original\naugment(finalizando_knn$.workflow[[1]], \n                         new_data = dados_novos)\n```\n","srcMarkdownNoYaml":"\n\n# Questão 1:\n\nCrie um problema de regressão simulado em que a variável *target* (variável resposta) depende de 5 variáveis preditoras, porém, a base de dados, com 5 mil observações possui outras 15 *features* que não são relevantes para a predição. A variável *target* deve ser gerada a partir de uma função linear das variáveis preditoras, em que você poderá definir os pesos dessas 5 primeiras e as outras 15 restantes deverão ter peso zero. Ajuste a regressão Lasso e Ridge usando *10-fold cross-validation* e avalie o risco preditivo dos modelos. Quais os valores estimados dos coeficientes e qual modelo você escolheria para fazer previsões? Qual dos modelos gerou um vetor esparso dos coeficientes estimados? \\\n\n`Resposta:` \n\n```{r}\nrm(list = ls())\n\n# Carregando pacotes \nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(workflowsets)\nlibrary(yardstick)\nlibrary(glmnet)\n\n# Dando preferencias as funcoes do tidymodels \ntidymodels::tidymodels_prefer()\n\n# Setando a semente \nset.seed(0)\n\n# Função para gerar os dados \ngerando_dados <- function(n = 5000L){\n  regressao <- function(i){\n    x <- rnorm(n = 5000L, 0, 1)\n    target <- 7*x[1L] - 5*x[2L] + 2*x[3L] + 4*x[4L] + 9*x[5L] + rnorm(1L, 0, 0.5)\n    tibble(\n      y = target,\n      x1 = x[1L],\n      x2 = x[2L],\n      x3 = x[3L],\n      x4 = x[4L],\n      x5 = x[5L]\n    )\n  }\n  dados <- purrr::map(.x = 1L:n, .f = regressao) %>% \n    purrr::list_rbind()\n  \n  parte_esparsa <- matrix(0, n, 15)\n  \n  dados <- cbind(dados, parte_esparsa)\n  colnames(dados) <- c(\"y\", paste0(\"x\", 1L:20L))\n  tibble::as_tibble(dados)\n}\n\ndados <- gerando_dados()\n\n# Realizando o hold-out \ndados_split <- rsample::initial_split(dados, prop = 0.8, strata = \"y\")\ntreino <- rsample::training(dados_split)\nteste <- rsample::testing(dados_split)\n\n# Setando o modelo (set engine) \nmodelo_ridge <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = 0) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\nmodelo_lasso <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = 1) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\n# Criando workflows \nall_wf <- \n  workflowsets::workflow_set(\n    preproc = list(y ~ .),\n    models = list(ridge = modelo_ridge, lasso = modelo_lasso), \n    cross = TRUE\n  )\n\n# Validação cruzada \nset.seed(0)\ncv <- rsample::vfold_cv(treino, v = 10L)\n\n# Setando a métrica \nmetrica <- yardstick::metric_set(rmse)\n\n# Tunagem dos hiperparâmetros \ntunagem <- \n  all_wf %>% \n  workflowsets::workflow_map(\n    seed = 0, \n    verbose = TRUE,\n    resamples = cv,\n    grid = 50,\n    metrics = metrica\n  )\n```\n\n\n```{r}\n# Rank dos melhores modelos \nmodelos_rank <- tunagem %>% workflowsets::rank_results() %>% print()\n```\n\n\n```{r}\n# Selecionando os melhores modelos \nmelhor_ridge <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_ridge\") %>% \n  tune::select_best(metric = \"rmse\") \n\nmelhor_lasso <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_lasso\") %>% \n  tune::select_best(metric =\"rmse\")\n\n# Finalizando os modelos \nfinalizando_ridge <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_ridge\") %>% \n  tune::finalize_workflow(melhor_ridge) %>% \n  tune::last_fit(split = dados_split)\n\nfinalizando_lasso <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_lasso\") %>% \n  tune::finalize_workflow(melhor_lasso) %>% \n  tune::last_fit(split = dados_split)\n\n# Visualizando as métricas do modelo Ridge\nfinalizando_ridge %>% workflowsets::collect_metrics()\n```\n\n\n```{r}\n# Visualizando as métricas do modelo Lasso\nfinalizando_lasso %>% workflowsets::collect_metrics()\n```\n\n\nAvaliando o risco preditivo dos modelos, nota-se que o modelo Lasso apresentou um Erro Quadrático Médio (EQM) de $0.503$, enquanto o modelo Ridge apresentou um EQM de $0.965$. Além disso, observa-se que ambos os modelos apresentaram um $R^{2}$ de $0.999$. Como o risco preditivo do modelo Lasso foi menor que o do modelo Ridge, então eu escolheria o modelo Lasso para fazer as previsões.\\\n\n\n```{r}\n# Visualizando predições do modelo Ridge\nfinalizando_ridge %>% workflowsets::collect_predictions()\n```\n\n\n```{r}\n# Visualizando predições do modelo Lasso\nfinalizando_lasso %>% workflowsets::collect_predictions()\n```\n\n\n```{r}\n# Extraindo o modelo Ridge\nmodelo_final_ridge <- \n  finalizando_ridge %>% \n  extract_fit_parsnip() \n\n# Extraindo o modelo Lasso\nmodelo_final_lasso <- \n  finalizando_lasso %>% \n  extract_fit_parsnip()\n```\n\n\n```{r}\n# Visualizando os coeficientes estimados do modelo Ridge\ncoeficientes_ridge <- modelo_final_ridge %>% \n  tidy() %>% \n  filter(term != \"(Intercept)\") %>% print()\n```\n\n\n```{r}\n# Visualizando os coeficientes estimados do modelo Lasso\ncoeficientes_lasso <- modelo_final_lasso %>% \n  tidy() %>% \n  filter(term != \"(Intercept)\") %>% print()\n```\n\n\nO modelo Lasso gerou um vetor esparso de coeficientes estimados, pois assim como na penalização AIC é realizada a seleção de variáveis, consequentemente, alguns coeficientes são zerados, o mesmo não acontece com o modelo Ridge.\\\n\n\n```{r}\n# Fazendo previsões \ndados_novos <- dados[sample(1:nrow(dados), 10), -1]\n\n# Fazendo previsões com o modelo Ridge\npredict(finalizando_ridge$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n\n```{r}\n# Fazendo previsões com o modelo Lasso\npredict(finalizando_lasso$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo Ridge ao conjunto de dados original\naugment(finalizando_ridge$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo Lasso ao conjunto de dados original\naugment(finalizando_lasso$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n# Questão 2:\n\nConsidere o melhor modelo da questão anterior, e compare-o com a regressão *Elastic Net*. Faça uma comparação justa dos modelos, utilizando `workflow_set` e `workflow_map`. Avalie o risco preditivo dos modelos e compare os coeficientes estimados. Qual dos modelos você escolheria para fazer previsões? Explique! \\\n\n`Resposta:`\n\nComo o melhor modelo na questão anterior foi o modelo Lasso, então irei compará-lo com o modelo Elastic Net.\\\n\n```{r}\nrm(list = ls())\n\n# Carregando pacotes \nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(workflowsets)\nlibrary(yardstick)\nlibrary(glmnet)\n\n# Dando preferencias as funcoes do tidymodels \ntidymodels::tidymodels_prefer()\n\n# Setando a semente \nset.seed(0)\n\n# Função para gerar os dados \ngerando_dados <- function(n = 5000L){\n  regressao <- function(i){\n    x <- rnorm(n = 5000L, 0, 1)\n    target <- 7*x[1L] - 5*x[2L] + 2*x[3L] + 4*x[4L] + 9*x[5L] + rnorm(1L, 0, 0.5)\n    tibble(\n      y = target,\n      x1 = x[1L],\n      x2 = x[2L],\n      x3 = x[3L],\n      x4 = x[4L],\n      x5 = x[5L]\n    )\n  }\n  dados <- purrr::map(.x = 1L:n, .f = regressao) %>% \n    purrr::list_rbind()\n  \n  parte_esparsa <- matrix(0, n, 15)\n  \n  dados <- cbind(dados, parte_esparsa)\n  colnames(dados) <- c(\"y\", paste0(\"x\", 1L:20L))\n  tibble::as_tibble(dados)\n}\n\ndados <- gerando_dados()\n\n# Realizando o hold-out \ndados_split <- rsample::initial_split(dados, prop = 0.8, strata = \"y\")\ntreino <- rsample::training(dados_split)\nteste <- rsample::testing(dados_split)\n\n# Setando o modelo (set engine) \nmodelo_lasso <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = 1) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\nmodelo_elastic <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = tune::tune()) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\n# Criando workflows \nall_wf <- \n  workflowsets::workflow_set(\n    preproc = list(y ~ .),\n    models = list(lasso = modelo_lasso, elastic = modelo_elastic), \n    cross = TRUE\n  )\n\n# Validação cruzada \nset.seed(0)\ncv <- rsample::vfold_cv(treino, v = 10L)\n\n# Setando a métrica \nmetrica <- yardstick::metric_set(rmse)\n\n# Tunagem dos hiperparâmetros \ntunagem <- \n  all_wf %>% \n  workflowsets::workflow_map(\n    seed = 0, \n    verbose = TRUE,\n    resamples = cv,\n    grid = 50,\n    metrics = metrica\n  )\n```\n\n\n```{r}\n# Rank dos melhores modelos \nmodelos_rank <- tunagem %>% workflowsets::rank_results() %>% print()\n```\n\n\n```{r}\n# Selecionando os melhores modelos \nmelhor_lasso <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_lasso\") %>% \n  tune::select_best(metric =\"rmse\")\n\nmelhor_elastic <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_elastic\") %>% \n  tune::select_best(metric = \"rmse\")\n\n# Finalizando os modelos \nfinalizando_lasso <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_lasso\") %>% \n  tune::finalize_workflow(melhor_lasso) %>% \n  tune::last_fit(split = dados_split)\n\nfinalizando_elastic <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_elastic\") %>% \n  tune::finalize_workflow(melhor_elastic) %>% \n  tune::last_fit(split = dados_split)\n\n## Visualizando as métricas do modelo Lasso\nfinalizando_lasso %>% workflowsets::collect_metrics()\n```\n\n\n```{r}\n# Visualizando as métricas do modelo Elastic Net\nfinalizando_elastic %>% workflowsets::collect_metrics()\n```\n\n\nAvaliando o risco preditivo dos modelos, nota-se que o modelo Lasso apresentou um Erro Quadrático Médio (EQM) de $0.503$, enquanto o modelo Elastic Net apresentou um EQM de $0.502$. Além disso, observa-se que ambos os modelos apresentaram um $R^{2}$ de $0.999$. Como o risco preditivo do modelo Elastic Net foi um pouco menor que o do modelo Lasso, então eu escolheria o modelo Elastic Net para fazer as previsões.\\\n\n\n```{r}\n# Visualizando predições do modelo Lasso\nfinalizando_lasso %>% workflowsets::collect_predictions()\n```\n\n```{r}\n# Visualizando predições do modelo Elastic Net\nfinalizando_elastic %>% workflowsets::collect_predictions()\n```\n\n```{r}\n# Extraindo o modelo Lasso\nmodelo_final_lasso <- \n  finalizando_lasso %>% \n  extract_fit_parsnip() \n\n# Extraindo o modelo Elastic Net\nmodelo_final_elastic <- \n  finalizando_elastic %>% \n  extract_fit_parsnip()\n```\n\n\n```{r}\n# Visualizando os coeficientes estimados do modelo Lasso\ncoeficientes_lasso <- modelo_final_lasso %>% \n  tidy() %>% \n  filter(term != \"(Intercept)\") %>% print()\n```\n\n\n```{r}\n# Visualizando os coeficientes estimados do modelo Elastic Net\ncoeficientes_elastic <- modelo_final_elastic %>% \n  tidy() %>% \n  filter(term != \"(Intercept)\") %>% print()\n```\n\n```{r}\n# Fazendo previsões \ndados_novos <- dados[sample(1:nrow(dados), 10), -1]\n\n# Fazendo previsões com o modelo Lasso\npredict(finalizando_lasso$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n\n```{r}\n# Fazendo previsões com o modelo Elastic Net\npredict(finalizando_elastic$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo Lasso ao conjunto de dados original\naugment(finalizando_lasso$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo Elastic Net ao conjunto de dados original\naugment(finalizando_elastic$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n# Questão 3:\n\nUtilize o método *K - Nearest Neighbors* para prever o preço médio ( variável `MEDV`) de uma casa em diferentes áreas da cidade de Boston com base em várias características socioeconômicas e geográficas. Faça uma descritiva dos dados e realize a fase de preprocessamento dos dados.\\\n\n**Você deverá:**\\\n\n1. Explorar as variáveis, identificando as variáveis que possuem um comportamento assimétrico;\\\n2. Pré-processar os dados e incluir o preprocessamento no pipeline. No preprocessamento, você\n deverá:\\\n -  Realizar a transformação de Yeo-Johnson nas variáveis que possuem um comportamento assimétrico. No pacote *recipes*, utilize `step_YeoJohnson`;\n - Incluir no preprocessamento a eliminação de variáveis altamente correlacionadas;\\\n - Incluir no preprocessamento a eliminação de covariáveis com zero variância.\\\n3. Estimar o risco preditivo do modelo. Houve boas previsões? Explique!\\\n4. Você deverá estratificar os dados em $80 \\%$ para treino e $20 \\%$ para teste, com base na variável *target*.\\\n5. Utilize na validação cruzada *10-fold cross-validation*.\\\n\nAcesse o [link](https://www.kaggle.com/datasets/fedesoriano/the-boston-houseprice-data) para baixar os dados.\\\n\n`Resposta:`\n\n```{r}\nrm(list = ls())\n\n# Carregando pacotes \nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(workflowsets)\nlibrary(yardstick)\nlibrary(glmnet)\nlibrary(kknn)\nlibrary(visdat)\nlibrary(janitor)\nlibrary(parsnip)\nlibrary(skimr)\n\n# Dando preferencias as funcoes do tidymodels \ntidymodels::tidymodels_prefer()\n\n# Setando a semente \nset.seed(0)\n\n# Carregando os dados \ndados <- read.csv(\"~/JOANA/ESTATÍSTICA/2024.1/Aprendizagem de Máquina/AM/Prova2/dados/boston.csv\")\n\n# Limpando os nomes das variáveis \ndados <-\n  dados %>% \n  janitor::clean_names()\n\n\n# Visualizando as primeiras observações dos dados\nhead(dados)\n```\n\n```{r}\n# Visualizando a estrutura dos dados\nglimpse(dados)\n```\n\n```{r}\n# Estatística descritiva dos dados\nskimr::skim(dados)\n```\n\nObserva-se que o conjunto de dados contém 506 observações e 14 variáveis. Além disso, observa-se que as variáveis `crim`, `zn`, `indus`, `nox`, `rm`, `age`, `dis`, `tax`, `ptratio`, `b`, `lstat` e `medv` são do tipo numérico, enquanto as variáveis `chas` e `rad` são do tipo inteiro categóricas.\\\n\n```{r}\n# Visualizando as variáveis que possuem um comportamento assimétrico\nDescTools::Desc(dados)\n```\n\nUtilizando a função `Desc()` da library `DescTools` para analisar visualmente as variáveis que possuem um comportamento assimétrico, e avaliando a assimetria das variáveis com base do valor do argumento `skew` de cada variável, nota-se que as variáveis `indus` e `rm` possuem um comportamento simétrico, pois o valor do `skew`destas variáveis estão próximos de zero, enquanto as variáveis `crim`, `zn`, `nox`, `age`, `dis`, `tax`, `ptratio`, `b`, `lstat` e `medv` possuem um comportamento assimétrico.\\\n\n```{r}\n# Olhando rapidamento os dados\nvisdat::vis_dat(dados)\n```\n\n```{r}\n# Visualizando a correlação entre as variáveis \nvisdat::vis_cor(dados)\n```\n\n\n```{r}\nset.seed(0)\n\n# Data Splitting\ndados_split <- rsample::initial_split(dados, prop = 0.8, strata = \"medv\")\ntreino <- rsample::training(dados_split)\nteste <- rsample::testing(dados_split)\n\n# Criando o conjunto de validação\ncv <- rsample::vfold_cv(treino, v = 10L)\n\n# Pré-processamento dos dados \nreceita <- \n  recipes::recipe(medv ~ ., data = treino) %>%\n  # Eliminando as variáveis constantes (com zero variância)\n  recipes::step_zv(all_predictors()) %>%\n  # Transformando as variáveis assimétricas\n  recipes::step_YeoJohnson(all_numeric_predictors()) %>%\n  # Transformando as variáveis categóricas em dicotômicas (0 e 1) \n  recipes::step_dummy(all_nominal_predictors()) %>%\n  # Eliminando as variáveis altamente correlacionadas\n  recipes::step_corr(all_numeric_predictors()) \n```\n\n\n```{r}\n# Ajustando o modelo KNN \nmodelo_knn <- \n  parsnip::nearest_neighbor(neighbors = tune(\"k\")) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"kknn\")\n```\n\n\n```{r}\n# Criando o Workflow \nwf <- \n  workflowsets::workflow_set(\n    preproc = list(formula = receita),\n    models = list(knn = modelo_knn), \n    cross = TRUE\n  )\n```\n\n```{r}\n# Setando a métrica\nmetrica <- yardstick::metric_set(rmse)\n\n# Tunagem dos hiperparâmetros\ntunagem <- \n  wf %>% \n  workflowsets::workflow_map(\n    seed = 0, \n    verbose = TRUE,\n    resamples = cv,\n    grid = 50,\n    metrics = metrica\n  )\n```\n\n```{r}\n# Selecionando o melhor modelo\nmelhor_knn <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_knn\") %>% \n  tune::select_best(metric = \"rmse\")\n\n# Finalizando o modelo\nfinalizando_knn <-\n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_knn\") %>% \n  tune::finalize_workflow(melhor_knn) %>% \n  tune::last_fit(split = dados_split)\n```\n\n```{r}\n# Visualizando as métricas do modelo KNN\nfinalizando_knn %>% workflowsets::collect_metrics()\n```\n\nEm relação ao risco preditivo do modelo KNN, observa-se que o Erro Quadrático Médio (EQM) foi de $4.74$ e o $R^{2}$ de $0.730$, o EQM foi relativamente bom, mas como o $R^{2}$ não é muito alto, é provável que o modelo não faça boas previsões para alguns preços médios das casas de diferentes áreas da cidade de Boston.\\\n\n\n```{r}\n# Visualizando predições do modelo KNN\nfinalizando_knn %>% workflowsets::collect_predictions()\n```\n\nAnalisando algumas predições acima do modelo KNN, observa-se que o modelo fez boas previsões para os preços médios (`medv`) em sua grande parte, porém para alguns preços médios o modelo não fez boas previsões.\\\n\n```{r}\n# Extraindo o modelo KNN\nmodelo_final_knn <- \n  finalizando_knn %>% \n  extract_fit_parsnip()\n```\n\n\n```{r}\n# Fazendo previsões \ndados_novos <- dados[sample(1:nrow(dados), 10), ]\n\n# Fazendo previsões com o modelo KNN\npredict(finalizando_knn$.workflow[[1]], \n                           new_data = dados_novos) \n```\n\n\n```{r}\n# Adicionando as previsões com o modelo KNN ao conjunto de dados original\nprevisoes_knn <- augment(finalizando_knn$.workflow[[1]], \n                         new_data = dados_novos) %>% print()\n```\n\n```{r}\n# Adicionando as previsões com o modelo KNN ao conjunto de dados original\nprevisoes_knn[, c(\"medv\", \".pred\")] %>% print()\n```\n\nObserva-se que o modelo fez boas previsões para os preços médios (`medv`) em sua grande parte, porém para alguns preços médios o modelo não fez boas previsões.\\\n\n\n# Questão 4:\n\nCom base na questão 1, escolha entre as 5 *features* preditoras que foram úteis para gerar $y$, duas para introduzir $10 \\%$ de *missing values* em cada uma dessas duas variáveis. A introdução das observações faltantes deverá ser aleatória. Após, isso, realize a comparação do método *Elastic-Net* com o método *K - Nearest Neighbors* - KNN. Compare o risco preditivo de cada um do modelos. Na fase de pré-processamento, você deverá utilizar também o método KNN, considerando $k =5$ dados faltantes. Qual o modelo que forneceu um melhor risco preditivo? Explique!\\\n \n`Resposta:`\n\n```{r}\nrm(list = ls())\n\n# Carregando pacotes \nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(workflowsets)\nlibrary(yardstick)\nlibrary(glmnet)\nlibrary(kknn)\nlibrary(visdat)\n\n# Dando preferencias as funcoes do tidymodels \ntidymodels::tidymodels_prefer()\n\n# Setando a semente \nset.seed(0)\n\n# Função para gerar os dados \ngerando_dados <- function(n = 5000L){\n  regressao <- function(i){\n    x <- rnorm(n = 5000L, 0, 1)\n    target <- 7*x[1L] - 5*x[2L] + 2*x[3L] + 4*x[4L] + 9*x[5L] + rnorm(1L, 0, 0.5)\n    tibble(\n      y = target,\n      x1 = x[1L],\n      x2 = x[2L],\n      x3 = x[3L],\n      x4 = x[4L],\n      x5 = x[5L]\n    )\n  }\n  dados <- purrr::map(.x = 1L:n, .f = regressao) %>% \n    purrr::list_rbind()\n  \n  parte_esparsa <- matrix(0, n, 15)\n  \n  dados <- cbind(dados, parte_esparsa)\n  colnames(dados) <- c(\"y\", paste0(\"x\", 1L:20L))\n  tibble::as_tibble(dados)\n}\n\ndados <- gerando_dados()\n```\n\n\n```{r}\nset.seed(0) \n\n# Introduzindo 10% missing values nas variáveis x3 e x5 de forma aleatória\nid_na <- sample(1:nrow(dados), 0.1*nrow(dados))\ndados[id_na, \"x3\"] <- NA\ndados[id_na, \"x5\"] <- NA\n```\n\n```{r}\n# Olhando rapidamento os dados \nvisdat::vis_dat(dados)\n```\n\n\n```{r}\n# Visualizando a correlação entre as variáveis\nvisdat::vis_cor(dados[-c(7:21)])\n```\n\n```{r}\nset.seed(0)\n\n# Data Splitting\ndados_split <- rsample::initial_split(dados, prop = 0.8, strata = \"y\")\ntreino <- rsample::training(dados_split)\nteste <- rsample::testing(dados_split)\n\n# Criando o conjunto de validação\ncv <- rsample::vfold_cv(treino, v = 10L)\n\n# Pré-processamento dos dados \nreceita <- \n  recipe(y ~ ., data = treino) %>%\n  # Eliminando as variáveis constantes (com zero variância)\n  recipes::step_zv(all_predictors()) %>%\n  # Normalizando as variáveis numéricas\n  recipes::step_normalize(all_numeric_predictors()) %>%\n  #considerando k = 5 para inputar os dados faltantes\n  recipes::step_impute_knn(all_predictors(), neighbors = 5)  \n```\n\n\n```{r}\n# Setando o modelo (set engine) \nmodelo_elastic <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = tune::tune()) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\nmodelo_knn <- \n  parsnip::nearest_neighbor(neighbors = tune(\"k\")) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"kknn\")\n```\n\n\n```{r}\n# Criando workflows \nall_wf <- \n  workflowsets::workflow_set(\n    preproc = list(formula = receita),\n    models = list(elastic = modelo_elastic, knn = modelo_knn), \n    cross = TRUE\n  )\n```\n\n\n```{r}\n# Setando a métrica \nmetrica <- yardstick::metric_set(rmse)\n\n# Tunagem dos hiperparâmetros \ntunagem <- \n  all_wf %>% \n  workflowsets::workflow_map(\n    seed = 0, \n    verbose = TRUE,\n    resamples = cv,\n    grid = 50,\n    metrics = metrica\n  )\n```\n\n\n\n```{r}\n# Rank dos melhores modelos \nmodelos_rank <- tunagem %>% workflowsets::rank_results() %>% print()\n```\n\n\n```{r}\n# Selecionando os melhores modelos \nmelhor_elastic <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_elastic\") %>% \n  tune::select_best(metric = \"rmse\")\n\nmelhor_knn <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_knn\") %>% \n  tune::select_best(metric = \"rmse\")\n\n# Finalizando os modelos \nfinalizando_elastic <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_elastic\") %>% \n  tune::finalize_workflow(melhor_elastic) %>% \n  tune::last_fit(split = dados_split)\n\nfinalizando_knn <-\n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_knn\") %>% \n  tune::finalize_workflow(melhor_knn) %>% \n  tune::last_fit(split = dados_split)\n```\n\n\n```{r}\n# Visualizando as métricas do modelo Elastic Net\nfinalizando_elastic %>% workflowsets::collect_metrics()\n```\n\n\n```{r}\n# Visualizando as métricas do modelo KNN\nfinalizando_knn %>% workflowsets::collect_metrics()\n```\n\nAvaliando o risco preditivo dos modelos, nota-se que o modelo Elastic Net apresentou um Erro Quadrático Médio (EQM) de $3.41$, enquanto o modelo KNN apresentou um EQM de $4.15$. Além disso, observa-se que o modelo Elastic Net apresentou um $R^{2}$ de $0.930$, enquanto para o modelo KNN o $R^{2}$ foi de $0.906$. Como o EQM do modelo Elastic Net foi menor que o do modelo KNN, além do $R^{2}$ do modelo Elastic Net ter sido maior que o do KNN, logo o modelo Elastic Net nos forneceu um melhor risco preditivo que o KNN.\\\n\n\n```{r}\n# Visualizando predições do modelo Elastic Net\nfinalizando_elastic %>% workflowsets::collect_predictions()\n```\n\n\n```{r}\n# Visualizando predições do modelo KNN\nfinalizando_knn %>% workflowsets::collect_predictions()\n```\n\n```{r}\n# Extraindo o modelo Elastic Net\nmodelo_final_elastic <- \n  finalizando_elastic %>% \n  extract_fit_parsnip()\n\n# Extraindo o modelo KNN\nmodelo_final_knn <- \n  finalizando_knn %>% \n  extract_fit_parsnip()\n```\n\n\n# Questão 5:\n\n Considere a base de dados referente à despesas médicas, cujo o objetivo é predizer a variável `charges`. Clique [aqui](https://www.kaggle.com/datasets/mirichoi0218/insurance) para efetuar o download dos dados. Considere os algoritmos, lasso, ridge, *elastic net* e KNN e compare o risco preditivo de cada um dos modelos.\\\n \nVocê deverá utilizar boas práticas na comparação, explorar os dados e avaliar de forma adequada o risco preditivo de cada um dos modelos considerados. Perceba que existem variáveis categóricas na base de dados. Dessa forma, você deverá introduzir no *pipeline* o pré-processamento. Discuta o resultado.\\\n \n`Resposta:`\n\n```{r}\nrm(list = ls())\n\n# Carregando pacotes \nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(tibble)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(patchwork)\nlibrary(workflowsets)\nlibrary(yardstick)\nlibrary(glmnet)\nlibrary(kknn)\nlibrary(visdat)\n\n# Dando preferencias as funcoes do tidymodels \ntidymodels::tidymodels_prefer()\n\n# Setando a semente \nset.seed(0)\n\n# Carregando os dados \ndados <- read.csv(\"~/JOANA/ESTATÍSTICA/2024.1/Aprendizagem de Máquina/AM/Prova2/dados/insurance.csv\")\n\n# Visualizando as primeiras observações dos dados\nhead(dados)\n```\n\n```{r}\n# Visualizando a estrutura dos dados\nglimpse(dados)\n```\n\n```{r}\n# Olhando rapidamento os dados \nvisdat::vis_dat(dados)\n```\n\n```{r}\n# Visualizando a correlação entre as variáveis \nvisdat::vis_cor(dados[-c(2,5,6)])\n```\n\n\n```{r}\nset.seed(0)\n\n# Data Splitting\ndados_split <- rsample::initial_split(dados, prop = 0.8, strata = \"charges\")\ntreino <- rsample::training(dados_split)\nteste <- rsample::testing(dados_split)\n\n# Criando o conjunto de validação\ncv <- rsample::vfold_cv(treino, v = 5L)\n\n# Pré-processamento dos dados \nreceita <- \n  recipe(charges ~ ., data = treino) %>%\n  # Eliminando as variáveis constantes (com zero variância)\n  recipes::step_zv(all_predictors()) %>%\n  # Normalizando as variáveis numéricas\n  recipes::step_normalize(all_numeric_predictors()) %>%\n  # Transformando as variáveis categóricas em dicotômicas (0 e 1) \n  step_dummy(all_nominal_predictors()) %>%\n  # Eliminando as variáveis correlacionadas\n  recipes::step_corr(all_numeric_predictors()) \n```\n\n\n```{r}\n# Setando o modelo (set engine) \nmodelo_ridge <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = 0) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\nmodelo_lasso <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = 1) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\nmodelo_elastic <- \n  parsnip::linear_reg(penalty = tune::tune(), mixture = tune::tune()) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"glmnet\")\n\nmodelo_knn <- \n  parsnip::nearest_neighbor(neighbors = tune(\"k\")) %>% \n  parsnip::set_mode(\"regression\") %>% \n  parsnip::set_engine(\"kknn\")\n```\n\n\n```{r}\n# Criando workflows \nall_wf <- \n  workflowsets::workflow_set(\n    preproc = list(formula = receita),\n    models = list(ridge = modelo_ridge, lasso = modelo_lasso, \n                  elastic = modelo_elastic, knn = modelo_knn), \n    cross = TRUE\n  )\n```\n\n\n```{r}\n# Setando a métrica \nmetrica <- yardstick::metric_set(rmse)\n\n# Tunagem dos hiperparâmetros \ntunagem <- \n  all_wf %>% \n  workflowsets::workflow_map(\n    seed = 0, \n    verbose = TRUE,\n    resamples = cv,\n    grid = 50,\n    metrics = metrica\n  )\n```\n\n\n\n```{r}\n# Rank dos melhores modelos \nmodelos_rank <- tunagem %>% workflowsets::rank_results() %>% print()\n```\n\n\n```{r}\n# Selecionando os melhores modelos \nmelhor_ridge <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_ridge\") %>% \n  tune::select_best(metric = \"rmse\")\n\nmelhor_lasso <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_lasso\") %>% \n  tune::select_best(metric =\"rmse\")\n\nmelhor_elastic <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_elastic\") %>% \n  tune::select_best(metric = \"rmse\")\n\nmelhor_knn <- \n  tunagem %>% \n  workflowsets::extract_workflow_set_result(\"formula_knn\") %>% \n  tune::select_best(metric = \"rmse\")\n\n# Finalizando os modelos \nfinalizando_ridge <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_ridge\") %>% \n  tune::finalize_workflow(melhor_ridge) %>% \n  tune::last_fit(split = dados_split)\n\nfinalizando_lasso <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_lasso\") %>% \n  tune::finalize_workflow(melhor_lasso) %>% \n  tune::last_fit(split = dados_split)\n\nfinalizando_elastic <- \n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_elastic\") %>% \n  tune::finalize_workflow(melhor_elastic) %>% \n  tune::last_fit(split = dados_split)\n\nfinalizando_knn <-\n  tunagem %>% \n  workflowsets::extract_workflow(\"formula_knn\") %>% \n  tune::finalize_workflow(melhor_knn) %>% \n  tune::last_fit(split = dados_split)\n```\n\n```{r}\n# Visualizando as métricas do modelo Ridge\nfinalizando_ridge %>% workflowsets::collect_metrics()\n```\n\n```{r}\n# Visualizando as métricas do modelo Lasso\nfinalizando_lasso %>% workflowsets::collect_metrics()\n```\n\n```{r}\n# Visualizando as métricas do modelo Elastic Net\nfinalizando_elastic %>% workflowsets::collect_metrics()\n```\n\n\n```{r}\n# Visualizando as métricas do modelo KNN\nfinalizando_knn %>% workflowsets::collect_metrics()\n```\n\nComparando o risco preditivo dos modelos, observa-se que o modelo KNN foi o que apresentou o melhor risco preditivo com um menor Erro Quadrático Médio (EQM) de $5550$ e um maior $R^{2}$ de $0.811$. O modelo Lasso obteve um EQM de $6442$, enquanto o modelo Elastic Net apresentou um EQM de $6446$, em que ambos tiveram um $R^{2}$ de $0.743$. Por fim, o modelo que mostrou um pior desempenho foi o Ridge, com um maior EQM de $6530$ e $R^{2}$ de $0.744$.\\\n\n```{r}\n# Visualizando predições do modelo Ridge\nfinalizando_ridge %>% workflowsets::collect_predictions()\n```\n\n```{r}\n# Visualizando predições do modelo Lasso\nfinalizando_lasso %>% workflowsets::collect_predictions()\n```\n\n```{r}\n# Visualizando predições do modelo Elastic Net\nfinalizando_elastic %>% workflowsets::collect_predictions()\n```\n\n\n```{r}\n# Visualizando predições do modelo KNN\nfinalizando_knn %>% workflowsets::collect_predictions()\n```\n\n```{r}\n# Extraindo o modelo Ridge\nmodelo_final_ridge <- \n  finalizando_ridge %>% \n  extract_fit_parsnip()\n\n# Extraindo o modelo Lasso\nmodelo_final_lasso <- \n  finalizando_lasso %>% \n  extract_fit_parsnip()\n\n# Extraindo o modelo Elastic Net\nmodelo_final_elastic <- \n  finalizando_elastic %>% \n  extract_fit_parsnip()\n\n# Extraindo o modelo KNN\nmodelo_final_knn <- \n  finalizando_knn %>% \n  extract_fit_parsnip()\n```\n\n```{r}\n# Fazendo previsões \ndados_novos <- dados[sample(1:nrow(dados), 10), -7]\n\n# Fazendo previsões com o modelo Ridge\npredict(finalizando_ridge$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n\n```{r}\n# Fazendo previsões com o modelo Lasso\npredict(finalizando_lasso$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n\n```{r}\n# Fazendo previsões com o modelo Elastic Net\npredict(finalizando_elastic$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n```{r}\n# Fazendo previsões com o modelo KNN\npredict(finalizando_knn$.workflow[[1]], \n                           new_data = dados_novos)\n```\n\n```{r}\n# Adicionando as previsões com o modelo Ridge ao conjunto de dados original\naugment(finalizando_ridge$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo Lasso ao conjunto de dados original\naugment(finalizando_lasso$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo Elastic Net ao conjunto de dados original\naugment(finalizando_elastic$.workflow[[1]], \n                         new_data = dados_novos)\n```\n\n\n```{r}\n# Adicionando as previsões com o modelo KNN ao conjunto de dados original\naugment(finalizando_knn$.workflow[[1]], \n                         new_data = dados_novos)\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":1000,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","self-contained":true,"highlight-style":"github","toc":true,"toc-depth":2,"number-sections":false,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.549","title":"Prova 2 - Aprendizagem de Máquina","author":"Joana D'arc Nunes da Silva, Matrícula: 20180078535","date":"last-modified","date-format":"DD MMM, YYYY","page-layout":"full","editor":"source","code-block-bg":true,"code-block-border-left":"#9400D3","toc-title":"Sumário","toc-location":"left","number-depth":3,"smooth-scroll":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}